"""

import numpy as np
import random as rand

class QLearner(object):

    def __init__(self,
        num_states=100,
        num_actions = 4,
        alpha = 0.2,
        gamma = 0.9,
        rar = 0.5,
        radr = 0.99,
        dyna = 0,
        verbose = False):

        self.verbose = verbose
        self.num_actions = num_actions
        self.num_states = num_states
        self.alpha = alpha
        self.gamma = gamma
        self.rar = rar
        self.radr = radr
        self.dyna = dyna
        self.s = 0
        self.a = 0

        self.Q = np.zeros(((self.num_states), self.num_actions))

        self.hallucination = []
    def author(self):
        return 'wchai8'

    def querysetstate(self, s):
        """
        @summary: Update the state without updating the Q-table
        @param s: The new state
        @returns: The selected action
        """
        self.s = s
        self.a = action = np.argmax(self.Q[s])
        if self.verbose:
            print
        "s =", s, "a =", action
        return action

    def updateQ(self, s, a, s_prime, r):
        self.Q[s, a] = (1 - self.alpha) * self.Q[s, a] + self.alpha * (
                    r + self.gamma * self.Q[s_prime, np.argmax(self.Q[s_prime])])

    def query(self,s_prime,r):
        """
        @summary: Update the Q table and return an action
        @param s_prime: The new state
        @param r: The ne state
        @returns: The selected action
        """
        a = self.a
        s = self.s

        self.hallucination.append((s, a, s_prime, r))

        self.updateQ(s, a, s_prime, r)


        rand_indexes = np.random.randint(len(self.hallucination), size = self.dyna)
        
        if self.dyna != 0:
            count = 0
            while count < self.dyna:
                index = rand_indexes[count]
                dyna_s, dyna_a, dyna_s_prime, dyna_r = self.hallucination[index]

                self.updateQ(dyna_s, dyna_a, dyna_s_prime, dyna_r)
                count += 1

        action = self.querysetstate(s_prime)
        self.rar = self.rar * self.radr

        if self.verbose:
            print
            "s =", s_prime,"a =",action,"r =",r
        return action

if __name__=="__main__":
    print
    "Remember Q from Star Trek? Well, this isn't him"
